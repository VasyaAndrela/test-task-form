{"version":3,"sources":["components/Header/Header.jsx","components/SideContent/SideContent.jsx","components/Main/Main.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","className","SideContent","initialFormState","beneficiaries","id","Math","floor","random","fullName","dateOfBirth","optional","relationship","percentage","isClicked","Main","props","initialValues","onSubmit","values","console","log","JSON","stringify","handleChange","primaryTotalPercentage","reduce","acc","value","parseInt","noValidate","autoComplete","name","push","remove","map","beneficiary","index","shouldRenderControls","pushNewField","type","placeholder","onChange","required","step","min","max","maxlength","classNames","disabled","length","onClick","pushRemoveItSelves","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f613d461.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.scss'\n\nconst Header = () => (\n  <div className='header'>\n    <div className='header__logo-wrapper'>\n      <i className='uil uil-signal-alt-3' />\n      <h1 className='header__label'>IRA Application</h1>\n    </div>\n    <p className='header__text'>IRA Accounts provided by Fidelity Investments</p>\n  </div>\n);\n\nexport default Header;\n","import React from \"react\";\nimport \"./SideContent.scss\";\n\nconst SideContent = () => (\n  <ul className=\"side\">\n    <li>\n      <div className=\"side__block side__block__checked\">\n        <i className=\"uil uil-check\" />\n        <p>Personal information</p>\n      </div>\n    </li>\n    <li>\n      <div className=\"side__block side__block__checked\">\n        <i className=\"uil uil-check\" />\n        <p>Contact information</p>\n      </div>\n    </li>\n    <li>\n      <div className=\"side__block side__block__checked\">\n        <i className=\"uil uil-check\" />\n        <p>Relationship</p>\n      </div>\n    </li>\n    <li>\n      <div className=\"side__block side__block__active\">\n        <i className=\"fa fa-circle\" />\n        <p>Beneficiaries</p>\n      </div>\n    </li>\n    <li>\n      <div className=\"side__block side__block__unactive\">\n        <i className=\"uil uil-circle\" />\n        <p>Account Characteristics</p>\n      </div>\n    </li>\n    <li>\n      <div className=\"side__block side__block__unactive\">\n        <i className=\"uil uil-circle\" />\n        <p>Review</p>\n      </div>\n    </li>\n  </ul>\n);\n\nexport default SideContent;\n","import React from \"react\";\n\nimport \"./Main.scss\";\nimport classNames from \"classnames\";\nimport { Field, FieldArray, Form, Formik} from \"formik\";\n\nconst initialFormState = {\n  beneficiaries: [\n    {\n      id: Math.floor(Math.random() * 100),\n      fullName: \"\",\n      dateOfBirth: \"\",\n      optional: \"\",\n      relationship: \"\",\n      percentage: null,\n      isClicked: false\n    }\n  ]\n};\n\nconst Main = props => (\n  <Formik\n    className=\"formik\"\n    props={props}\n    initialValues={initialFormState}\n    onSubmit={values => {\n      console.log(\"onSubmit\", JSON.stringify(values, null, 2));\n    }}\n  >\n    {({\n      values,\n      handleChange,\n      ...props\n    }) => {\n      const primaryTotalPercentage = values.beneficiaries.reduce(\n        (acc, value) => acc + (parseInt(value.percentage) || 0),\n        0\n      );\n      return (\n      <div className=\"main\">\n        <header>\n          <h1 className=\"main__label\">Beneficiaries</h1>\n        </header>\n\n        <main className=\"main__content\">\n          <p className=\"main__content-label\">Primary Beneficiaries</p>\n\n          <div className=\"main__content__characters-table\">\n            <Form noValidate autoComplete=\"off\">\n              <FieldArray name=\"beneficiaries\" props={props}>\n                {({ push, remove }) => (\n                  <>\n                    {values.beneficiaries.map((beneficiary, index) => {\n                      const fullName = `beneficiaries[${index}].fullName`;\n                      const dateOfBirth = `beneficiaries[${index}].dateOfBirth`;\n                      const relationship = `beneficiaries[${index}].relationship`;\n                      const optional = `beneficiaries[${index}].optional`;\n                      const percentage = `beneficiaries[${index}].percentage`;\n\n                      const disabled = true;\n\n                      const shouldRenderControls =\n                        beneficiary.fullName &&\n                        beneficiary.dateOfBirth &&\n                        beneficiary.relationship &&\n                        beneficiary.percentage;\n\n                      const pushNewField = () => {\n                        push({\n                          id: Math.floor(Math.random() * 100),\n                          fullName: \"\",\n                          dateOfBirth: \"\",\n                          optional: \"\",\n                          relationship: \"\",\n                          percentage: \"\",\n                          isClicked: false\n                        })\n                      }\n\n                      const pushRemoveItSelves = () => {\n                        primaryTotalPercentage <= 99 && pushNewField();\n                        const thereIsNoButton = () => {\n                          beneficiary.isClicked = true;\n                        };\n                        thereIsNoButton();\n                      };\n\n                      const deleteAndPush = () => {\n                        if(primaryTotalPercentage === 100) {\n                            remove(index);\n                            pushNewField();\n                        } else {\n                            remove(index + 1);\n                            remove(index);\n                            pushNewField();\n                          }\n                      }                       \n                      \n                      return (\n                        <div className=\"groupInputsIconButton\">\n                          <form className=\"form\">\n                            <div className=\"form__block\">\n                              <label className=\"form__block__name\">\n                                Full name\n                              </label>\n                              <input\n                                className=\"form__block__name-input\"\n                                type=\"text\"\n                                placeholder=\"John Doe\"\n                                name={fullName}\n                                value={beneficiary.fullName}\n                                onChange={handleChange}\n                                required\n                              />\n                            </div>\n                            <div className=\"form__block\">\n                              <label className=\"form__block__birth\">\n                                Date of Birth\n                              </label>\n                              <i className=\"uil uil-calendar-alt\" />\n                              <input\n                                className=\"form__block__birth-input\"\n                                type=\"text\"\n                                placeholder=\"MM/DD/YYYY\"\n                                name={dateOfBirth}\n                                value={beneficiary.dateOfBirth}\n                                onChange={handleChange}\n                                required\n                              />\n                            </div>\n                            <div className=\"form__block\">\n                              <select className=\"form__block__ssn\">\n                                <option>SSN</option>\n                              </select>\n                            </div>\n                            <div className=\"form__block\">\n                              <input\n                                className=\"form__block__optional\"\n                                type=\"text\"\n                                placeholder=\"Optional\"\n                                name={optional}\n                                value={beneficiary.optional}\n                                onChange={handleChange}\n                              />\n                            </div>\n                            <div className=\"form__block\">\n                              <label className=\"form__block__relationship\">\n                                Relationship\n                              </label>\n                              <select\n                                className=\"form__block__relationship-select\"\n                                name={relationship}\n                                value={beneficiary.relationship}\n                                onChange={handleChange}\n                                required\n                              >\n                                <option>Select</option>\n                                <option>Trust</option>\n                              </select>\n                            </div>\n                            <div className=\"form__block\">\n                              <Field\n                                className=\"form__block__percentage\"\n                                type=\"number\"\n                                name={percentage}\n                                placeholder=\"0%\"\n                                value={beneficiary.percentage}\n                                step={10}\n                                min={0}\n                                max={100 - primaryTotalPercentage + beneficiary.percentage}\n                                maxlength={2}\n                                required\n                              />\n                            </div>\n                          </form>\n                          {shouldRenderControls && (\n                            <>\n                              <button\n                                className={classNames(\"removeButton\", \"button\")}\n                                disabled={\n                                  values.beneficiaries.length > index + 2\n                                    ? disabled\n                                    : null\n                                }\n                                onClick={() => deleteAndPush()}\n                              >\n                                <i className=\"uil uil-times\" />\n                              </button>\n                              {beneficiary.isClicked || (\n                                <button\n                                  className={classNames(\n                                    \"checkButton\",\n                                    \"button\"\n                                  )}\n                                  onClick={() => pushRemoveItSelves()}\n                                >\n                                  <i className=\"uil uil-check\" />\n                                </button>\n                              )}\n                            </>\n                          )}\n                        </div>\n                      );\n                    })}\n                  </>\n                )}\n              </FieldArray>\n            </Form>\n          </div>\n          <p className={primaryTotalPercentage >= 100 ? \"main__content__summary-full\" : \"main__content__summary\"}>\n            {primaryTotalPercentage >= 100 && <i className=\"uil uil-check\" />}Primary total:{\" \"}\n            {primaryTotalPercentage}\n            %\n          </p>\n\n          <div className=\"main__content__switch\">\n            <p className=\"main__content-label\">Contingent Beneficiaries</p>\n            <i className=\"fa fa-toggle-off\" />\n          </div>\n          <button className=\"main__content__button\" disabled={primaryTotalPercentage < 100}>\n            Next\n          </button>\n        </main>\n      </div>\n    )}}\n  </Formik>\n  );\n\nexport default Main;\n","import React from \"react\";\nimport Header from \"./components/Header/Header\";\nimport SideContent from \"./components/SideContent/SideContent\";\nimport Container from \"./components/Main/Main\";\nimport \"./App.scss\";\n\nconst App = () => (\n  <div className=\"app\">\n    <Header />\n    <SideContent />\n    <Container />\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport './styles/inputs.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}